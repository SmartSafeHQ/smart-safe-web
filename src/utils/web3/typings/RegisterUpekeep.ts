/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IKeeperRegistrar {
  export type RegistrationParamsStruct = {
    name: string;
    encryptedEmail: BytesLike;
    upkeepContract: AddressLike;
    gasLimit: BigNumberish;
    adminAddress: AddressLike;
    checkData: BytesLike;
    offchainConfig: BytesLike;
    amount: BigNumberish;
  };

  export type RegistrationParamsStructOutput = [
    name: string,
    encryptedEmail: string,
    upkeepContract: string,
    gasLimit: bigint,
    adminAddress: string,
    checkData: string,
    offchainConfig: string,
    amount: bigint
  ] & {
    name: string;
    encryptedEmail: string;
    upkeepContract: string;
    gasLimit: bigint;
    adminAddress: string;
    checkData: string;
    offchainConfig: string;
    amount: bigint;
  };
}

export interface RegisterUpekeepInterface extends Interface {
  getFunction(
    nameOrSignature: "registerAndPredictID" | "upKeepsPerSmartSafe"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UpkeepRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "registerAndPredictID",
    values: [IKeeperRegistrar.RegistrationParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "upKeepsPerSmartSafe",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "registerAndPredictID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upKeepsPerSmartSafe",
    data: BytesLike
  ): Result;
}

export namespace UpkeepRegisteredEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RegisterUpekeep extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: RegisterUpekeepInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  registerAndPredictID: TypedContractMethod<
    [_params: IKeeperRegistrar.RegistrationParamsStruct],
    [void],
    "nonpayable"
  >;

  upKeepsPerSmartSafe: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "registerAndPredictID"
  ): TypedContractMethod<
    [_params: IKeeperRegistrar.RegistrationParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upKeepsPerSmartSafe"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "UpkeepRegistered"
  ): TypedContractEvent<
    UpkeepRegisteredEvent.InputTuple,
    UpkeepRegisteredEvent.OutputTuple,
    UpkeepRegisteredEvent.OutputObject
  >;

  filters: {
    "UpkeepRegistered(uint256)": TypedContractEvent<
      UpkeepRegisteredEvent.InputTuple,
      UpkeepRegisteredEvent.OutputTuple,
      UpkeepRegisteredEvent.OutputObject
    >;
    UpkeepRegistered: TypedContractEvent<
      UpkeepRegisteredEvent.InputTuple,
      UpkeepRegisteredEvent.OutputTuple,
      UpkeepRegisteredEvent.OutputObject
    >;
  };
}
