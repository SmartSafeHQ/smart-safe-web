/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace TransactionManager {
  export type TransactionApprovalsStruct = {
    ownerAddress: AddressLike;
    approvalStatus: BigNumberish;
  };

  export type TransactionApprovalsStructOutput = [
    ownerAddress: string,
    approvalStatus: bigint
  ] & { ownerAddress: string; approvalStatus: bigint };

  export type TransactionStruct = {
    from: AddressLike;
    to: AddressLike;
    transactionNonce: BigNumberish;
    value: BigNumberish;
    createdAt: BigNumberish;
    data: BytesLike;
    signatures: BytesLike[];
    trigger: BigNumberish;
  };

  export type TransactionStructOutput = [
    from: string,
    to: string,
    transactionNonce: bigint,
    value: bigint,
    createdAt: bigint,
    data: string,
    signatures: string[],
    trigger: bigint
  ] & {
    from: string;
    to: string;
    transactionNonce: bigint;
    value: bigint;
    createdAt: bigint;
    data: string;
    signatures: string[];
    trigger: bigint;
  };
}

export interface SmartSafeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addNewOwner"
      | "addTransactionSignature"
      | "changeThreshold"
      | "createTransactionProposal"
      | "executeTransaction"
      | "performUpkeep"
      | "removeOwner"
      | "removeTransaction"
      | "setupOwners"
      | "checkUpkeep"
      | "eip712Domain"
      | "getOwners"
      | "getTransactionApprovals"
      | "getTransactions"
      | "requiredTransactionNonce"
      | "threshold"
      | "totalOwners"
      | "transactionNonce"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "Initialized"
      | "OwnerAdded"
      | "OwnerRemoved"
      | "SafeReceived"
      | "ThresholdChanged"
      | "TransactionExecutionSucceeded"
      | "TransactionProposalCreated"
      | "TransactionSignatureAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addNewOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addTransactionSignature",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createTransactionProposal",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "performUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeTransaction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setupOwners",
    values: [AddressLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUpkeep",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransactionApprovals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requiredTransactionNonce",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "threshold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalOwners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transactionNonce",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addTransactionSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createTransactionProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "performUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setupOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUpkeep",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredTransactionNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "threshold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionNonce",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerAddedEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerRemovedEvent {
  export type InputTuple = [arg0: AddressLike];
  export type OutputTuple = [arg0: string];
  export interface OutputObject {
    arg0: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SafeReceivedEvent {
  export type InputTuple = [sender: AddressLike, value: BigNumberish];
  export type OutputTuple = [sender: string, value: bigint];
  export interface OutputObject {
    sender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ThresholdChangedEvent {
  export type InputTuple = [from: BigNumberish, to: BigNumberish];
  export type OutputTuple = [from: bigint, to: bigint];
  export interface OutputObject {
    from: bigint;
    to: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionExecutionSucceededEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionProposalCreatedEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransactionSignatureAddedEvent {
  export type InputTuple = [arg0: BigNumberish];
  export type OutputTuple = [arg0: bigint];
  export interface OutputObject {
    arg0: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SmartSafe extends BaseContract {
  connect(runner?: ContractRunner | null): BaseContract;
  attach(addressOrName: AddressLike): this;
  deployed(): Promise<this>;

  interface: SmartSafeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addNewOwner: TypedContractMethod<
    [_newOwner: AddressLike, _newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  addTransactionSignature: TypedContractMethod<
    [
      _transactionProposalSigner: AddressLike,
      _transactionApprovalType: BigNumberish,
      _transactionProposalSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  changeThreshold: TypedContractMethod<
    [_newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  createTransactionProposal: TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _data: BytesLike,
      _trigger: BigNumberish,
      _transactionProposalSigner: AddressLike,
      _transactionProposalSignature: BytesLike
    ],
    [void],
    "payable"
  >;

  executeTransaction: TypedContractMethod<
    [_transactionNonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  performUpkeep: TypedContractMethod<
    [_performData: BytesLike],
    [void],
    "nonpayable"
  >;

  removeOwner: TypedContractMethod<
    [_prevOwner: AddressLike, _owner: AddressLike],
    [void],
    "nonpayable"
  >;

  removeTransaction: TypedContractMethod<[], [void], "nonpayable">;

  setupOwners: TypedContractMethod<
    [_owners: AddressLike[], _threshold: BigNumberish],
    [void],
    "payable"
  >;

  checkUpkeep: TypedContractMethod<
    [_checkData: BytesLike],
    [[boolean, string] & { _upkeepNeeded: boolean; _performData: string }],
    "view"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getOwners: TypedContractMethod<[], [string[]], "view">;

  getTransactionApprovals: TypedContractMethod<
    [_transactionNonce: BigNumberish],
    [TransactionManager.TransactionApprovalsStructOutput[]],
    "view"
  >;

  getTransactions: TypedContractMethod<
    [_page: BigNumberish, _transactionStatus: BigNumberish],
    [TransactionManager.TransactionStructOutput[]],
    "view"
  >;

  requiredTransactionNonce: TypedContractMethod<[], [bigint], "view">;

  threshold: TypedContractMethod<[], [bigint], "view">;

  totalOwners: TypedContractMethod<[], [bigint], "view">;

  transactionNonce: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addNewOwner"
  ): TypedContractMethod<
    [_newOwner: AddressLike, _newThreshold: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addTransactionSignature"
  ): TypedContractMethod<
    [
      _transactionProposalSigner: AddressLike,
      _transactionApprovalType: BigNumberish,
      _transactionProposalSignature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeThreshold"
  ): TypedContractMethod<[_newThreshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createTransactionProposal"
  ): TypedContractMethod<
    [
      _to: AddressLike,
      _value: BigNumberish,
      _data: BytesLike,
      _trigger: BigNumberish,
      _transactionProposalSigner: AddressLike,
      _transactionProposalSignature: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<
    [_transactionNonce: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "performUpkeep"
  ): TypedContractMethod<[_performData: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeOwner"
  ): TypedContractMethod<
    [_prevOwner: AddressLike, _owner: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeTransaction"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setupOwners"
  ): TypedContractMethod<
    [_owners: AddressLike[], _threshold: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "checkUpkeep"
  ): TypedContractMethod<
    [_checkData: BytesLike],
    [[boolean, string] & { _upkeepNeeded: boolean; _performData: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransactionApprovals"
  ): TypedContractMethod<
    [_transactionNonce: BigNumberish],
    [TransactionManager.TransactionApprovalsStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransactions"
  ): TypedContractMethod<
    [_page: BigNumberish, _transactionStatus: BigNumberish],
    [TransactionManager.TransactionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "requiredTransactionNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "threshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalOwners"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transactionNonce"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerAdded"
  ): TypedContractEvent<
    OwnerAddedEvent.InputTuple,
    OwnerAddedEvent.OutputTuple,
    OwnerAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerRemoved"
  ): TypedContractEvent<
    OwnerRemovedEvent.InputTuple,
    OwnerRemovedEvent.OutputTuple,
    OwnerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SafeReceived"
  ): TypedContractEvent<
    SafeReceivedEvent.InputTuple,
    SafeReceivedEvent.OutputTuple,
    SafeReceivedEvent.OutputObject
  >;
  getEvent(
    key: "ThresholdChanged"
  ): TypedContractEvent<
    ThresholdChangedEvent.InputTuple,
    ThresholdChangedEvent.OutputTuple,
    ThresholdChangedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionExecutionSucceeded"
  ): TypedContractEvent<
    TransactionExecutionSucceededEvent.InputTuple,
    TransactionExecutionSucceededEvent.OutputTuple,
    TransactionExecutionSucceededEvent.OutputObject
  >;
  getEvent(
    key: "TransactionProposalCreated"
  ): TypedContractEvent<
    TransactionProposalCreatedEvent.InputTuple,
    TransactionProposalCreatedEvent.OutputTuple,
    TransactionProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TransactionSignatureAdded"
  ): TypedContractEvent<
    TransactionSignatureAddedEvent.InputTuple,
    TransactionSignatureAddedEvent.OutputTuple,
    TransactionSignatureAddedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnerAdded(address)": TypedContractEvent<
      OwnerAddedEvent.InputTuple,
      OwnerAddedEvent.OutputTuple,
      OwnerAddedEvent.OutputObject
    >;
    OwnerAdded: TypedContractEvent<
      OwnerAddedEvent.InputTuple,
      OwnerAddedEvent.OutputTuple,
      OwnerAddedEvent.OutputObject
    >;

    "OwnerRemoved(address)": TypedContractEvent<
      OwnerRemovedEvent.InputTuple,
      OwnerRemovedEvent.OutputTuple,
      OwnerRemovedEvent.OutputObject
    >;
    OwnerRemoved: TypedContractEvent<
      OwnerRemovedEvent.InputTuple,
      OwnerRemovedEvent.OutputTuple,
      OwnerRemovedEvent.OutputObject
    >;

    "SafeReceived(address,uint256)": TypedContractEvent<
      SafeReceivedEvent.InputTuple,
      SafeReceivedEvent.OutputTuple,
      SafeReceivedEvent.OutputObject
    >;
    SafeReceived: TypedContractEvent<
      SafeReceivedEvent.InputTuple,
      SafeReceivedEvent.OutputTuple,
      SafeReceivedEvent.OutputObject
    >;

    "ThresholdChanged(uint8,uint8)": TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;
    ThresholdChanged: TypedContractEvent<
      ThresholdChangedEvent.InputTuple,
      ThresholdChangedEvent.OutputTuple,
      ThresholdChangedEvent.OutputObject
    >;

    "TransactionExecutionSucceeded(uint64)": TypedContractEvent<
      TransactionExecutionSucceededEvent.InputTuple,
      TransactionExecutionSucceededEvent.OutputTuple,
      TransactionExecutionSucceededEvent.OutputObject
    >;
    TransactionExecutionSucceeded: TypedContractEvent<
      TransactionExecutionSucceededEvent.InputTuple,
      TransactionExecutionSucceededEvent.OutputTuple,
      TransactionExecutionSucceededEvent.OutputObject
    >;

    "TransactionProposalCreated(uint64)": TypedContractEvent<
      TransactionProposalCreatedEvent.InputTuple,
      TransactionProposalCreatedEvent.OutputTuple,
      TransactionProposalCreatedEvent.OutputObject
    >;
    TransactionProposalCreated: TypedContractEvent<
      TransactionProposalCreatedEvent.InputTuple,
      TransactionProposalCreatedEvent.OutputTuple,
      TransactionProposalCreatedEvent.OutputObject
    >;

    "TransactionSignatureAdded(uint64)": TypedContractEvent<
      TransactionSignatureAddedEvent.InputTuple,
      TransactionSignatureAddedEvent.OutputTuple,
      TransactionSignatureAddedEvent.OutputObject
    >;
    TransactionSignatureAdded: TypedContractEvent<
      TransactionSignatureAddedEvent.InputTuple,
      TransactionSignatureAddedEvent.OutputTuple,
      TransactionSignatureAddedEvent.OutputObject
    >;
  };
}
